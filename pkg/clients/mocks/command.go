// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	clients "github.com/jumppad-labs/jumppad/pkg/clients"
	mock "github.com/stretchr/testify/mock"
)

// Command is an autogenerated mock type for the Command type
type Command struct {
	mock.Mock
}

// Execute provides a mock function with given fields: config
func (_m *Command) Execute(config clients.CommandConfig) (int, error) {
	ret := _m.Called(config)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(clients.CommandConfig) (int, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(clients.CommandConfig) int); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(clients.CommandConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kill provides a mock function with given fields: pid
func (_m *Command) Kill(pid int) error {
	ret := _m.Called(pid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCommand interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommand creates a new instance of Command. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommand(t mockConstructorTestingTNewCommand) *Command {
	mock := &Command{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

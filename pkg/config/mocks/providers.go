package mocks

import (
	"sync"

	types "github.com/jumppad-labs/hclconfig/types"
	sdk "github.com/jumppad-labs/plugin-sdk"
	mock "github.com/stretchr/testify/mock"
)

// Providers is an autogenerated mock type for the Providers type
type Providers struct {
	lock sync.Mutex
	mock.Mock
	Providers  []*Provider
	returnVals map[string]error
}

func NewProviders(returnVals map[string]error) *Providers {
	_m := &Providers{}
	_m.Providers = []*Provider{}
	_m.returnVals = returnVals
	_m.lock = sync.Mutex{}

	return _m
}

// GetProvider provides a mock function with given fields: c
func (_m *Providers) GetProvider(c types.Resource) sdk.Provider {
	_m.lock.Lock()
	defer _m.lock.Unlock()

	// create a mock provider
	m := &Provider{}

	val := _m.returnVals[c.Metadata().Name]
	m.On("Create", mock.Anything).Return(val)
	m.On("Destroy", mock.Anything, mock.Anything).Return(val)
	m.On("Refresh", mock.Anything).Return(val)
	m.On("Changed").Return(false, val)
	m.On("Init", mock.Anything, mock.Anything).Return(nil)

	m.Init(c, nil)

	// add it to the collection for easy access
	_m.Providers = append(_m.Providers, m)

	return m
}

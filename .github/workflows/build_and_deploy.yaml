---

name: Build And Deploy
on: [push]
jobs:
  test:
    env:
      GONOSUMDB: "github.com/moby/moby"
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Setup Go version
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Get dependencies
        run: |
          go version
          go get -v -t ./...

      - name: Unit Test
        run: |
          go test -v -race ./...

      #- name: Upload Code Coverage
      #  uses: codecov/codecov-action@v1
      #  with:
      #    token: ${{ secrets.CODECOV_TOKEN }}  # required

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: ${{ github.job_id }}

  e2e_linux:
    name: Linux E2E Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v2

      - name: Setup Go version
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: E2E test for build binary
        run: make test_e2e_cmd

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          tile: ${{ github.job_id }}
          description: "End to end tests for Linux"

  dagger_build:
    name: Dagger Test
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v2

      - name: Build
        uses: dagger/dagger-for-github@v5
        with:
          verb: download
          module: ./.dagger
          args: build --src . --output ./dagger-output
          version: "0.9.5"
      
      - name: Package
        uses: dagger/dagger-for-github@v5
        with:
          verb: download
          module: ./.dagger
          args: package --binaries ./dagger-output --output ./dagger-output
          version: "0.9.5"
      
      - name: Upload artifact Jumppad Darwin Arm64
        uses: actions/upload-artifact@v2
        with:
          name: jumpad_darwin_arm64
          path: |
            ./dagger-output/build/darwin/arm64/jumppad
      
      - name: Upload artifact Jumppad Darwin Amd64
        uses: actions/upload-artifact@v2
        with:
          name: jumpad_darwin_amd64
          path: |
            ./dagger-output/build/darwin/amd64/jumppad
      
      - name: Upload artifact Jumppad Linux Arm64
        uses: actions/upload-artifact@v2
        with:
          name: jumpad_linux_arm64
          path: |
            ./dagger-output/build/linux/arm64/jumppad

      - name: Upload artifact Jumppad Linux Amd64
        uses: actions/upload-artifact@v2
        with:
          name: jumpad_linux_amd64
          path: |
            ./dagger-output/build/linux/amd64/jumppad
      
      - name: Upload artifact Jumppad Windows Amd64
        uses: actions/upload-artifact@v2
        with:
          name: jumpad_windows_amd64
          path: |
            ./dagger-output/build/windows/amd64/jumppad.exe
      
      - name: Upload artifact debian package Linux Arm64
        uses: actions/upload-artifact@v2
        with:
          name: jumpad_debian_arm64
          path: |
            ./dagger-output/pkg/linux/arm64/jumppad.deb
      
      - name: Upload artifact debian package Linux Amd64
        uses: actions/upload-artifact@v2
        with:
          name: jumpad_debian_amd64
          path: |
            ./dagger-output/pkg/linux/amd64/jumppad.deb

  functional_test_build_dns:
    name: Build binary for Functional Tests
    runs-on: ubuntu-latest
    needs: dagger_build
    steps:
      - uses: actions/checkout@v2

      - name: Setup Go version
        uses: actions/setup-go@v4
        with:
          go-version: 1.21
      
      - name: Build Podman DNS plugin
        run: |
          cd ..
          git clone https://github.com/containers/dnsname.git
          cd dnsname
          make
          sudo cp ./bin/dnsname /usr/local/bin
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: podman_dns_plugin
          path: |
            /usr/local/bin/dnsname

  functional_test_docker:
    name: Test Docker
    runs-on: ubuntu-latest
    needs: dagger_build

    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        folder: [
          './examples/container',
          './examples/build',
          './examples/docs',
          './examples/nomad',
          './examples/single_k3s_cluster',
          './examples/multiple_k3s_clusters',
          './examples/exec',
          './examples/certificates',
          './examples/terraform',
          './examples/registries',
        ]

    steps:
      - name: Download-Binaries
        uses: actions/download-artifact@v2
        with:
          name: jumpad_linux_amd64
          path: /build_artifacts
      
      - name: Install binary executable
        run: |
          sudo cp /build_artifacts/jumppad /usr/local/bin/jumppad
          sudo chmod +x /usr/local/bin/jumppad

      - uses: actions/checkout@v2
      
      - name: Run tests
        run: |
          jumppad check --non-interactive
          jumppad purge --non-interactive
          jumppad test --non-interactive ${{matrix.folder}}

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          tile: ${{ github.job_id }}
          description: "Functional tests for docker: ${{matrix.folder}}"

  functional_test_podman:
    name: Test Podman
    runs-on: ubuntu-latest
    needs: dagger_build

    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        folder: [
          './examples/container',
          './examples/build',
          './examples/docs',
          './examples/nomad',
          './examples/single_k3s_cluster',
          './examples/multiple_k3s_clusters',
          './examples/exec',
        ]

    steps:
      - name: Download-Binaries
        uses: actions/download-artifact@v2
        with:
          name: jumpad_linux_amd64
          path: /build_artifacts
      
      - name: Install binary executable
        run: |
          sudo cp /build_artifacts/jumppad /usr/local/bin/jumppad
          sudo chmod +x /usr/local/bin/jumppad

      - uses: actions/checkout@v2
      
      - name: Install dependencies for Podman tests
        run: |
          sudo mkdir -p /etc/apt/keyrings

          # Debian Testing/Bookworm
          curl -fsSL https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/Debian_Testing/Release.key \
            | gpg --dearmor \
            | sudo tee /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg > /dev/null
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg]\
              https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/Debian_Testing/ /" \
            | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list > /dev/null

          # Debian Unstable/Sid
          curl -fsSL https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/Debian_Unstable/Release.key \
            | gpg --dearmor \
            | sudo tee /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg > /dev/null
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg]\
              https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/Debian_Unstable/ /" \
            | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list > /dev/null

          # Install Podman
          sudo apt-get update
          sudo apt-get -y upgrade
          sudo apt-get -y install podman

          # Start the Podman sock
          sudo nohup podman system service -t 0 > ./podman.log &
          sleep 10
          sudo chmod +x /run/podman
          sudo chmod 777 /run/podman/podman.sock
      
      - name: Run tests
        run: |
          jumppad check --non-interactive
          jumppad purge --non-interactive
          jumppad test --non-interactive ${{matrix.folder}}
        env:
          DOCKER_HOST: "unix:///run/podman/podman.sock"

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          tile: ${{ github.job_id }}
          description: "Functional tests for ${{matrix.folder}}"

  notorize_mac:
    name: Notrize binaries for Mac
    needs: 
      - functional_test_docker
      - functional_test_podman
    if: ${{ github.ref != 'refs/heads/main' }}
    runs-on: macos-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Download-Binaries x64
      uses: actions/download-artifact@v2
      with:
        name: jumppad_darwin_amd64
        path: dist/jumppad_darwin_amd64
    
    - name: Download-Binaries Arm64
      uses: actions/download-artifact@v2
      with:
        name: jumppad_darwin_amd64
        path: dist/jumppad_darwin_arm64
    
    - name: Import Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v1
      with:
        # The certificates in a PKCS12 file encoded as a base64 string
        p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
        # The password used to import the PKCS12 file.
        p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
    
    - name: List identities
      run: |
        security find-identity

    - name: Install gon via HomeBrew for code signing and app notarization
      run: |
        brew tap mitchellh/gon
        brew install mitchellh/gon/gon

    - name: Sign the Arm64 Mac binaries with Gon
      env:
        AC_USERNAME: ${{ secrets.AC_USERNAME }}
        AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
      run: |
        gon -log-level=debug -log-json ./.gon_arm64.json
    
    - name: Sign the Arm64 Mac binaries with Gon
      env:
        AC_USERNAME: ${{ secrets.AC_USERNAME }}
        AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
      run: |
        gon -log-level=debug -log-json ./.gon_amd64.json
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: jumppad_osx_notorized
        path: |
          dist/jumppad_arm64.dmg
          dist/jumppad_arm64.zip
          dist/jumppad_amd64.dmg
          dist/jumppad_amd64.zip

    - name: Send status to Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        tile: ${{ github.job_id }}
        description: "Notorize Mac applications"

  tag:
    name: Tag latest release
    runs-on: ubuntu-latest
    permissions:
       contents: write
    needs:
      - functional_test_docker
      - functional_test_podman
      #- e2e_mac
      - e2e_linux
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - name: Bump version and push tag
        id: tag
        uses: mathieudutour/github-tag-action@v5.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          description: "Automatically tagged main branch with new tag: ${{ steps.tag_version.outputs.new_tag }}"
    
      - name: Remove v in Tag
        id: version
        uses: ashley-taylor/regex-property-action@v1.0
        with:
          value: ${{ steps.tag.outputs.new_tag }}
          regex: "v"
          replacement: ""

    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}
      new_version: ${{ steps.version.outputs.value }}
  
  github_release:
    name: Create GitHub Release
    needs: 
      - notorize_mac_prod
      - tag
    environment:
      name: release
    runs-on: ubuntu-latest
    steps:
    - name: Download-Binaries
      uses: actions/download-artifact@v2
      with:
        name: jumppad_archives
        path: dist/

    - name: Generate SHA256 checksums
      run: |
        cd dist
        sha256sum jumppad_${{ needs.tag.outputs.new_version }}_linux_x86_64.tar.gz > checksums.txt
        sha256sum jumppad_${{ needs.tag.outputs.new_version }}_linux_arm64.tar.gz >> checksums.txt
        sha256sum jumppad_${{ needs.tag.outputs.new_version }}_linux_amd64.deb >> checksums.txt
        sha256sum jumppad_${{ needs.tag.outputs.new_version }}_linux_arm64.deb >> checksums.txt
        sha256sum jumppad_${{ needs.tag.outputs.new_version }}_linux_amd64.rpm >> checksums.txt
        sha256sum jumppad_${{ needs.tag.outputs.new_version }}_linux_arm64.rpm >> checksums.txt
        sha256sum jumppad_${{ needs.tag.outputs.new_version }}_darwin_x86_64.zip >> checksums.txt
        sha256sum jumppad_${{ needs.tag.outputs.new_version }}_darwin_arm64.zip >> checksums.txt
        sha256sum jumppad_${{ needs.tag.outputs.new_version }}_windows_x86_64.zip >> checksums.txt

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.tag.outputs.new_tag }}
        token: ${{ secrets.GH_TOKEN }}
        files: |
          dist/checksums.txt
          dist/jumppad_${{ needs.tag.outputs.new_version }}_linux_x86_64.tar.gz
          dist/jumppad_${{ needs.tag.outputs.new_version }}_linux_arm64.tar.gz
          dist/jumppad_${{ needs.tag.outputs.new_version }}_linux_amd64.rpm
          dist/jumppad_${{ needs.tag.outputs.new_version }}_linux_arm64.rpm
          dist/jumppad_${{ needs.tag.outputs.new_version }}_linux_amd64.deb
          dist/jumppad_${{ needs.tag.outputs.new_version }}_linux_arm64.deb
          dist/jumppad_${{ needs.tag.outputs.new_version }}_windows_x86_64.zip
          dist/jumppad_${{ needs.tag.outputs.new_version }}_darwin_x86_64.zip
          dist/jumppad_${{ needs.tag.outputs.new_version }}_darwin_arm64.zip

  brew:
    name: Release to HomeBrew
    needs: 
      - github_release
      - tag
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        repository: 'jumppad-labs/homebrew-repo'
        token: '${{ secrets.GH_TOKEN }}'

    - name: Configure Git
      run: |
        git config user.email "hello@jumppad.dev"
        git config user.name "Jumppad Bot"
        git pull origin main

    - name: Download-Binaries
      uses: actions/download-artifact@v2
      with:
        name: jumppad_archives
        path: dist/
    
    - name: Generate HomeBrew config
      run: |
        export VERSION=${{ needs.tag.outputs.new_version }}
        export DARWIN_ARM64_SHA=$(sha256sum  ./dist/jumppad${{ needs.tag.outputs.new_version }}_darwin_arm64.zip | cut -d " " -f 1)
        export DARWIN_x86_SHA=$(sha256sum  ./dist/jumppad_${{ needs.tag.outputs.new_version }}_darwin_x86_64.zip | cut -d " " -f 1)
        export LINUX_ARM64_SHA=$(sha256sum  ./dist/jumppad_${{ needs.tag.outputs.new_version }}_linux_arm64.tar.gz | cut -d " " -f 1)
        export LINUX_x86_SHA=$(sha256sum  ./dist/jumppad_${{ needs.tag.outputs.new_version }}_linux_x86_64.tar.gz | cut -d " " -f 1)

        cat <<- EOF > ./jumppad.rb
        # typed: false
        # frozen_string_literal: true

        class Jumppad < Formula
          desc ""
          homepage "https://jumppad.dev/"
          version "${VERSION}"

          if OS.mac? && Hardware::CPU.intel?
            url "https://github.com/jumppad-labs/jumppad/releases/download/v${VERSION}/jumppad_${VERSION}_darwin_x86_64.zip"
            sha256 "${DARWIN_x86_SHA}"
          end
          if OS.mac? && Hardware::CPU.arm?
            url "https://github.com/jumppad-labs/jumppad/releases/download/v${VERSION}/jumppad_${VERSION}_darwin_arm64.zip"
            sha256 "${DARWIN_ARM64_SHA}"
          end
          if OS.linux? && Hardware::CPU.intel?
            url "https://github.com/jumppad-labs/jumppad/releases/download/v${VERSION}/jumppad_${VERSION}_linux_x86_64.tar.gz"
            sha256 "${LINUX_x86_SHA}"
          end
          if OS.linux? && Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
            url "https://github.com/jumppad-labs/jumppad/releases/download/v${VERSION}/jumppad_${VERSION}_linux_arm64.tar.gz"
            sha256 "${LINUX_ARM64_SHA}"
          end

          def install
            bin.install "jumppad"
          end
        end
        EOF

        cat ./jumppad.rb
        rm -rf ./dist
      
    - name: Push update
      run: |
        git add .
        git commit -m "Update version to ${{ needs.tag.outputs.new_tag }}"
        git push

  winget:
    name: Publish to WinGet
    needs:
      - github_release
      - tag
    runs-on: windows-latest
    steps:
    - uses: jumppad-labs/winget-publish-action@v0.1.0
      with:
        publish-type: "Update"
        user: "jumppad"
        package: "jumppad"
        version: ${{ needs.tag.outputs.new_version }}
        url: "https://github.com/jumppad-labs/jumppad/releases/download/v${{ needs.tag.outputs.new_version }}/jumppad_${{ needs.tag.outputs.new_version }}_windows_x86_64.zip|x64"
        token: '${{ secrets.GH_TOKEN }}'

    - name: Send status to Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        tile: ${{ github.job_id }}
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        description: "Push new version ${{ needs.tag.outputs.new_version }} to Winget"

  apt:
    name: Update fury.io Apt repository
    needs:
      - github_release
      - tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64.deb", "arm64.deb", "amd64.rpm", "arm64.rpm"]

    steps:
    - name: Download release
      run: |
        wget "https://github.com/jumppad-labs/jumppad/releases/download/v${{ needs.tag.outputs.new_version }}/jumppad_${{ needs.tag.outputs.new_version }}_linux_${{ matrix.arch }}"

    - name: Upload release
      run: |
        curl -F package=@jumppad_${{ needs.tag.outputs.new_version }}_linux_${{ matrix.arch }} https://${{ secrets.FURY_JUMPPAD_TOKEN }}@push.fury.io/jumppad/

    - name: Send status to Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        tile: ${{ github.job_id }}
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        description: "Push new version ${{ needs.tag.outputs.new_version }} to Apt"

  update_website:
    name: Update Jumpad website with latest version
    needs:
      - github_release
      - tag
    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          repository: 'jumppad-labs/jumppad-labs.github.io'
          token: '${{ secrets.GH_TOKEN }}'

      - name: Configure Git
        run: |
          git config user.email "helo@jumppad.dev"
          git config user.name "Jumppad Bot"

      - name: Write version
        run: |
          echo "${{ needs.tag.outputs.new_version }}" > ./public/latest

      - name: Push update
        run: |
          git add .
          git commit -m "Update version to ${{ needs.tag.outputs.new_version }}"
          git push

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          tile: ${{ github.job_id }}
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          description: "Update website with latest version ${{ needs.tag.outputs.new_version }}"
